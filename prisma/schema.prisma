// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    refresh_token_expires_in Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model User {
    id            String    @id @default(cuid())
    name          String?
    password      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String    @default("user")
    accounts      Account[]
    sessions      Session[]

    sqlMagic   SQLMagic[]
    regexMagic RegexMagic[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model SQLMagic {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    query     String
    lang      String
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RegexMagic {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    regex     String
    lang      String
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([identifier, token])
}
